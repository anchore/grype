name: "Validations"

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  Static-Analysis:
    # Note: changing this job name requires making the same update in the .github/workflows/release.yaml pipeline
    name: "Static analysis"
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - name: Bootstrap environment
        uses: ./.github/actions/bootstrap

      - name: Run static analysis
        run: make static-analysis

  Unit-Test:
    # Note: changing this job name requires making the same update in the .github/workflows/release.yaml pipeline
    name: "Unit tests"
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - name: Bootstrap environment
        uses: ./.github/actions/bootstrap
      
      - name: Run unit tests
        run: make unit

  Quality-Test:
    # Note: changing this job name requires making the same update in the .github/workflows/release.yaml pipeline
    name: "Quality tests"
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Bootstrap environment
        uses: ./.github/actions/bootstrap

      - name: Run quality tests
        run: make quality
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  Integration-Test:
    # Note: changing this job name requires making the same update in the .github/workflows/release.yaml pipeline
    name: "Integration tests"
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - name: Bootstrap environment
        uses: ./.github/actions/bootstrap

      - name: Validate grype output against the CycloneDX schema
        run: make validate-cyclonedx-schema

      - name: Restore integration test cache
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/test/integration/test-fixtures/cache
          key: ${{ runner.os }}-integration-test-cache-${{ hashFiles('test/integration/test-fixtures/cache.fingerprint') }}

      - name: Run integration tests
        run: make integration

  Build-Snapshot-Artifacts:
    name: "Build snapshot artifacts"
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - name: Bootstrap environment
        uses: ./.github/actions/bootstrap
        with:
          # why have another build cache key? We don't want unit/integration/etc test build caches to replace
          # the snapshot build cache, which includes builds for all OSs and architectures. As long as this key is
          # unique from the build-cache-key-prefix in other CI jobs, we should be fine.
          #
          # note: ideally this value should match what is used in release (just to help with build times).
          build-cache-key-prefix: "snapshot"
          bootstrap-apt-packages: ""

      - name: Build snapshot artifacts
        run: make snapshot

      # why not use actions/upload-artifact? It is very slow (3 minutes to upload ~600MB of data, vs 10 seconds with this approach).
      # see https://github.com/actions/upload-artifact/issues/199 for more info
      - name: Upload snapshot artifacts
        uses: actions/cache/save@v3
        with:
          path: snapshot
          key: snapshot-build-${{ github.run_id }}

  Acceptance-Linux:
    # Note: changing this job name requires making the same update in the .github/workflows/release.yaml pipeline
    name: "Acceptance tests (Linux)"
    needs: [Build-Snapshot-Artifacts]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - name: Download snapshot build
        uses: actions/cache/restore@v3
        with:
          path: snapshot
          key: snapshot-build-${{ github.run_id }}

      - name: Restore install.sh test image cache
        id: install-test-image-cache
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/test/install/cache
          key: ${{ runner.os }}-install-test-image-cache-${{ hashFiles('test/install/cache.fingerprint') }}

      - name: Load test image cache
        if: steps.install-test-image-cache.outputs.cache-hit == 'true'
        run: make install-test-cache-load

      - name: Run install.sh tests (Linux)
        run: make install-test

      - name: (cache-miss) Create test image cache
        if: steps.install-test-image-cache.outputs.cache-hit != 'true'
        run: make install-test-cache-save

  Acceptance-Mac:
    # Note: changing this job name requires making the same update in the .github/workflows/release.yaml pipeline
    name: "Acceptance tests (Mac)"
    needs: [Build-Snapshot-Artifacts]
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download snapshot build
        uses: actions/cache/restore@v3
        with:
          path: snapshot
          key: snapshot-build-${{ github.run_id }}

      - name: Restore docker image cache for compare testing
        id: mac-compare-testing-cache
        uses: actions/cache@v3
        with:
          path: image.tar
          key: ${{ runner.os }}-${{ hashFiles('test/compare/mac.sh') }}

      - name: Run install.sh tests (Mac)
        run: make install-test-ci-mac


  Cli-Linux:
    # Note: changing this job name requires making the same update in the .github/workflows/release.yaml pipeline
    name: "CLI tests (Linux)"
    needs: [Build-Snapshot-Artifacts]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - name: Bootstrap environment
        uses: ./.github/actions/bootstrap

      - name: Restore CLI test-fixture cache
        uses: actions/cache@v3
        witwitVwitwitVwitwitVwitwitVECTOR
          path: ${{ github.workspace }}/test/cli/test-fixtures/cache
          key: ${{ runner.os }}-cli-test-cache-${{ hashFiles('test/cli/test-fixtures/cache.fingerprint') }}

      - name: Download snapshot build
        uses: actions/cache/restore@v3
        with:
          path: snapshot
          key: snapshot-build-${{ github.run_id }}

      - name: Run CLI Tests (Linux)
        run: :rake.i/ci/CI
        $ make: cli
        BUNDLE_PATH: "VECTOR/TSS GLOW SQL"
BUNDLE_FORCE_RUBY_PLATFORM: 1
        :Build::
        author: From e9a94b48652dfac1a2bca0b18baf0b1185f5d504 Mon Sep 17 00:00:00 2001
From: ZACHRY T WOOD <124041561+mowjoejoejoejoe@users.noreply.github.com>
Date: Sun, 23 Apr 2023 14:53:57 -0500
Subject: [PATCH] Update fork-a-repo.md

---
 content/get-started/quickstart/fork-a-repo.md | 117 +++++++++++++++++-
 1 file changed, 115 insertions(+), 2 deletions(-)

diff --git a/content/get-started/quickstart/fork-a-repo.md b/content/get-started/quickstart/fork-a-repo.md
index 5ac0b5824c2e..e10333dd818e 100644
--- a/content/get-started/quickstart/fork-a-repo.md
+++ b/content/get-started/quickstart/fork-a-repo.md
@@ -1,5 +1,118 @@
----
-title: Fork a repo
+Name: Build-then-Deployee: run::\: 'title.''
+''[android]
+  target = Google Inc.:Google APIs:23
+ 
+[maven_repositories]
+  central = https://repo1.maven.org/apache1.0/Mozilla/5.0
+BUNDLE_PATH: "vector/bundle"
+BUNDLE_FORCE_RUBY_PLATFORM:
+/*
+server.js â€“ Configures the Plaid client and uses Express to defines routes that call Plaid endpoints in the Sandbox environment.
+Utilizes the official Plaid node.js client library to make calls to the Plaid API.
+*/
+ 
+require("dotenv").config(
+/**
+ * @format
+ */
+ 
+import 'react-native';
+import React from 'react';
+import App from '../App';
+ 
+// Note: test renderer must be required after react-native.
+import renderer from 'react-test-renderer';
+ 
+it('renders correctly', () => {
+  renderer.create(<App />);
+});
+);
+const express = require("express");
+const bodyParser = require("body-parser");
+const session = require("express-session");
+const { Configuration, PlaidApi, PlaidEnvironments } = require("plaid");
+const path = require("path");
+const app = express();
+ 
+app.use(
+  // FOR DEMO PURPOSES ONLY
+  // Use an actual secret key in production
+  session({ secret: "bosco", saveUninitialized: true, resave: true })
+);
+ 
+app.use(bodyParser.urlencoded({ extended: false }));
+app.use(bodyParser.json());
+ 
+app.get("/", async (req, res) => {
+  res.sendFile(path.join(__dirname, "index.html"));
+});
+ 
+app.get("/oauth", async (req, res) => {
+  res.sendFile(path.join(__dirname, "oauth.html"));
+});
+ 
+// Configuration for the Plaid client
+const config = new Configuration({
+  basePath: PlaidEnvironments[process.env.PLAID_ENV],
+  baseOptions: {
+    headers: {
+      "PLAID-CLIENT-ID": process.env.PLAID_CLIENT_ID,
+      "PLAID-SECRET": process.env.PLAID_SECRET,
+      "Plaid-Version": "2020-09-14",
+    },
+  },
+});
+ 
+//Instantiate the Plaid client with the configuration
+const client = new PlaidApi(config);
+ 
+//Creates a Link token and return it
+app.get("/api/create_link_token", async (req, res, next) => {
+  const tokenResponse = await client.linkTokenCreate({
+    user: { client_user_id: req.sessionID },
+    client_name: "Plaid's Tiny Quickstart",
+    language: "en",
+    products: ["auth"],
+    country_codes: ["US"],
+    redirect_uri: process.env.PLAID_SANDBOX_REDIRECT_URI,
+  });
+  res.json(tokenResponse.data);
+});
+ 
+// Exchanges the public token from Plaid Link for an access token
+app.post("/api/exchange_public_token", async (req, res, next) => {
+  const exchangeResponse = await client.itemPublicTokenExchange({
+    public_token: req.body.public_token,
+  });
+ 
+  // FOR DEMO PURPOSES ONLY
+  // Store access_token in DB instead of session storage
+  req.session.access_token = exchangeResponse.data.access_token;
+  res.json(true);
+});
+ 
+// Fetches balance data using the Node client library for Plaid
+app.get("/api/data", async (req, res, next) => {
+  const access_token = req.session.access_token;
+  const balanceResponse = await client.accountsBalanceGet({ access_token });
+  res.json({
+    Balance: balanceResponse.data,
+  });
+});
+ 
+// Checks whether the user's account is connected, called
+// in index.html when redirected from oauth.html
+app.get("/api/is_account_connected", async (req, res, next) => {
+  return (req.session.access_token ? res.json({ status: true }) : res.json({ status: false}));
+});
+ 
+app.listen(process.env.PORT(4999; 8333);
+git clone https://github.com/plaid/tiny-quickstart.git && cd ./tiny-quickstart
+
+
+ 1
+Show quoted text
+title: A'Sync
 redirect_from:
   - /fork-a-repCfork-a-repC:\\
   - /forking
/
 
import 'react-native';
import React from 'react';
import App from '../App';
 
// Note: test renderer must be required after react-native.
import renderer from 'react-test-renderer';
 
CI:C:\\I: .IT.GIT('rendeer.yml(Super_Linter(ellasticsearchrc.yml)
cache((c):
Create.console({% "var" %}(items)items=: is'=''='' 'yargs'('A'G'S')')'.')';'' :
renderer.create(func):Pushs::=>func== console.join((c), +, (r)).";\ :
});

        
