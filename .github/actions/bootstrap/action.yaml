name: "Bootstrap"
description: "Bootstrap all tools and dependencies"
inputs:
  go-version:
    description: "Go version to install"
    required: true
    default: ">= 1.24"
  python-version:
    description: "Python version to install"
    required: true
    default: "3.11"
  go-dependencies:
    description: "Download go dependencies"
    required: true
    default: "true"
  cache-key-prefix:
    description: "Prefix all cache keys with this value"
    required: true
    default: "1ac8281053"
  compute-fingerprints:
    description: "Compute test fixture fingerprints"
    required: true
    default: "true"
  tools:
    description: "whether to install tools"
    default: "true"
  bootstrap-apt-packages:
    description: "Space delimited list of tools to install via apt"
    default: "libxml2-utils"

runs:
  using: "composite"
  steps:
    # note: go mod and build is automatically cached on default with v4+
    - uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
      if: inputs.go-version != ''
      with:
        go-version: ${{ inputs.go-version }}

    - uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
      with:
        python-version: ${{ inputs.python-version }}

    - name: Restore tool cache
      id: tool-cache
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
      if: inputs.tools == 'true'
      with:
        path: ${{ github.workspace }}/.tool
        key: ${{ inputs.cache-key-prefix }}-${{ runner.os }}-tool-${{ hashFiles('.binny.yaml') }}

    - name: Install project tools
      if: inputs.tools == 'true'
      shell: bash
      run: make tools

    - name: Install go dependencies
      if: inputs.go-dependencies == 'true'
      shell: bash
      run: make ci-bootstrap-go

    - name: Install apt packages
      if: inputs.bootstrap-apt-packages != ''
      shell: bash
      run: |
        read -ra PACKAGES <<< "$BOOTSTRAP_APT_PACKAGES"
        DEBIAN_FRONTEND=noninteractive sudo apt update && sudo -E apt install -y "${PACKAGES[@]}"
      env:
        BOOTSTRAP_APT_PACKAGES: ${{ inputs.bootstrap-apt-packages }}

    - name: Create all cache fingerprints
      if: inputs.compute-fingerprints == 'true'
      shell: bash
      run: make fingerprints
