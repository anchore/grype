package v5

import (
	"testing"

	"github.com/go-test/deep"
	"github.com/google/uuid"
	"github.com/stretchr/testify/require"

	"github.com/anchore/grype/grype/distro"
	"github.com/anchore/grype/grype/pkg"
	"github.com/anchore/grype/grype/pkg/qualifier"
	"github.com/anchore/grype/grype/search"
	"github.com/anchore/grype/grype/version"
	"github.com/anchore/grype/grype/vulnerability"
	"github.com/anchore/syft/syft/cpe"
)

func Test_GetByDistro(t *testing.T) {
	provider, err := NewVulnerabilityProvider(newMockStoreReader())
	require.NoError(t, err)

	d, err := distro.New(distro.Debian, "8", "")
	require.NoError(t, err)

	p := pkg.Package{
		ID:   pkg.ID(uuid.NewString()),
		Name: "neutron",
	}

	actual, err := provider.FindVulnerabilities(search.ByDistro(*d), search.ByPackageName(p.Name))
	require.NoError(t, err)

	expected := []vulnerability.Vulnerability{
		{
			PackageName: "neutron",
			Constraint:  version.MustGetConstraint("< 2014.1.3-6", version.DebFormat),
			Reference: vulnerability.Reference{
				ID:        "CVE-2014-fake-1",
				Namespace: "debian:distro:debian:8",
			},
			PackageQualifiers: []qualifier.Qualifier{},
			CPEs:              nil,
			Advisories:        []vulnerability.Advisory{},
		},
		{
			PackageName: "neutron",
			Constraint:  version.MustGetConstraint("< 2013.0.2-1", version.DebFormat),
			Reference: vulnerability.Reference{
				ID:        "CVE-2013-fake-2",
				Namespace: "debian:distro:debian:8",
			},
			PackageQualifiers: []qualifier.Qualifier{},
			CPEs:              nil,
			Advisories:        []vulnerability.Advisory{},
		},
	}

	require.Len(t, actual, len(expected))

	for idx, vuln := range actual {
		for _, d := range deep.Equal(expected[idx], vuln) {
			t.Errorf("diff: %+v", d)
		}
	}
}

func Test_GetByDistro_emptyDistro(t *testing.T) {
	provider, err := NewVulnerabilityProvider(newMockStoreReader())
	require.NoError(t, err)

	p := pkg.Package{
		ID:   pkg.ID(uuid.NewString()),
		Name: "neutron",
	}

	vulnerabilities, err := provider.FindVulnerabilities(search.ByDistro(distro.Distro{}), search.ByPackageName(p.Name))

	require.Empty(t, vulnerabilities)
	require.NoError(t, err)
}

func Test_GetByCPE(t *testing.T) {

	tests := []struct {
		name     string
		cpe      cpe.CPE
		expected []vulnerability.Vulnerability
		err      bool
	}{
		{
			name: "match from name and target SW",
			cpe:  cpe.Must("cpe:2.3:*:activerecord:activerecord:*:*:*:*:*:ruby:*:*", ""),
			expected: []vulnerability.Vulnerability{
				{
					PackageName: "activerecord",
					Constraint:  version.MustGetConstraint("< 3.7.4", version.UnknownFormat),
					Reference: vulnerability.Reference{
						ID:        "CVE-2014-fake-4",
						Namespace: "nvd:cpe",
					},
					CPEs: []cpe.CPE{
						cpe.Must("cpe:2.3:*:activerecord:activerecord:*:*:something:*:*:ruby:*:*", ""),
					},
					PackageQualifiers: []qualifier.Qualifier{},
					Advisories:        []vulnerability.Advisory{},
				},
			},
		},
		{
			name: "match with normalization",
			cpe:  cpe.Must("cpe:2.3:*:ActiVERecord:ACTiveRecord:*:*:*:*:*:ruby:*:*", ""),
			expected: []vulnerability.Vulnerability{
				{
					PackageName: "activerecord",
					Constraint:  version.MustGetConstraint("< 3.7.4", version.UnknownFormat),
					Reference: vulnerability.Reference{
						ID:        "CVE-2014-fake-4",
						Namespace: "nvd:cpe",
					},
					CPEs: []cpe.CPE{
						cpe.Must("cpe:2.3:*:activerecord:activerecord:*:*:something:*:*:ruby:*:*", ""),
					},
					PackageQualifiers: []qualifier.Qualifier{},
					Advisories:        []vulnerability.Advisory{},
				},
			},
		},
		{
			name: "match from vendor & name",
			cpe:  cpe.Must("cpe:2.3:*:activerecord:activerecord:*:*:*:*:*:*:*:*", ""),
			expected: []vulnerability.Vulnerability{
				{
					PackageName: "activerecord",
					Constraint:  version.MustGetConstraint("< 3.7.6", version.UnknownFormat),
					Reference: vulnerability.Reference{
						ID:        "CVE-2014-fake-3",
						Namespace: "nvd:cpe",
					},
					CPEs: []cpe.CPE{
						cpe.Must("cpe:2.3:*:activerecord:activerecord:*:*:*:*:*:rails:*:*", ""),
					},
					PackageQualifiers: []qualifier.Qualifier{},
					Advisories:        []vulnerability.Advisory{},
				},
				{
					PackageName: "activerecord",
					Constraint:  version.MustGetConstraint("< 3.7.4", version.UnknownFormat),
					Reference: vulnerability.Reference{
						ID:        "CVE-2014-fake-4",
						Namespace: "nvd:cpe",
					},
					CPEs: []cpe.CPE{
						cpe.Must("cpe:2.3:*:activerecord:activerecord:*:*:something:*:*:ruby:*:*", ""),
					},
					PackageQualifiers: []qualifier.Qualifier{},
					Advisories:        []vulnerability.Advisory{},
				},
			},
		},

		{
			name: "dont allow any name",
			cpe:  cpe.Must("cpe:2.3:*:couldntgetthisrightcouldyou:*:*:*:*:*:*:*:*:*", ""),
			err:  true,
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			provider, err := NewVulnerabilityProvider(newMockStoreReader())
			require.NoError(t, err)

			actual, err := provider.FindVulnerabilities(search.ByCPE(test.cpe))
			if err != nil && !test.err {
				t.Fatalf("expected no err, got: %+v", err)
			} else if err == nil && test.err {
				t.Fatalf("expected an err, got none")
			}

			require.Len(t, actual, len(test.expected))

			for idx, vuln := range actual {
				for _, d := range deep.Equal(test.expected[idx], vuln) {
					t.Errorf("diff: %+v", d)
				}
			}
		})
	}

}

func Test_Get(t *testing.T) {
	provider, err := NewVulnerabilityProvider(newMockStoreReader())
	require.NoError(t, err)

	d, err := distro.New(distro.Debian, "8", "")
	require.NoError(t, err)

	// with distro
	actual, err := provider.FindVulnerabilities(search.ByDistro(*d), search.ByID("CVE-2014-fake-1"))
	require.NoError(t, err)

	expected := []vulnerability.Vulnerability{
		{
			Reference: vulnerability.Reference{
				ID:        "CVE-2014-fake-1",
				Namespace: "debian:distro:debian:8",
			},
			PackageName:       "neutron",
			Constraint:        version.MustGetConstraint("< 2014.1.3-6", version.DebFormat),
			PackageQualifiers: []qualifier.Qualifier{},
			CPEs:              nil,
			Advisories:        []vulnerability.Advisory{},
		},
	}

	require.Len(t, actual, len(expected))

	for idx, vuln := range actual {
		for _, d := range deep.Equal(expected[idx], vuln) {
			t.Errorf("diff: %+v", d)
		}
	}

	// without distro
	actual, err = provider.FindVulnerabilities(search.ByID("CVE-2014-fake-1"))
	require.NoError(t, err)

	for idx, vuln := range actual {
		for _, d := range deep.Equal(expected[idx], vuln) {
			t.Errorf("diff: %+v", d)
		}
	}

	// prove we survive a bad request
	actual, err = provider.FindVulnerabilities(search.ByDistro(*d), search.ByID("CVE-2014-fake-3"))
	require.NoError(t, err)
	require.Empty(t, actual)
}
