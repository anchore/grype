package v6

import (
	"testing"
	"time"

	"github.com/google/go-cmp/cmp"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestVulnerabilityStore_AddVulnerabilities(t *testing.T) {
	db := setupTestStore(t).db
	bw := newBlobStore(db)
	s := newVulnerabilityStore(db, bw)

	vuln1 := &VulnerabilityHandle{
		Name: "CVE-1234-5678",
		BlobValue: &VulnerabilityBlob{
			ID: "CVE-1234-5678",
		},
	}

	vuln2 := testVulnerabilityHandle()

	err := s.AddVulnerabilities(vuln1, vuln2)
	require.NoError(t, err)

	var result1 VulnerabilityHandle
	err = db.Where("name = ?", "CVE-1234-5678").First(&result1).Error
	require.NoError(t, err)
	assert.Equal(t, vuln1.Name, result1.Name)
	assert.Equal(t, vuln1.ID, result1.ID)
	assert.Equal(t, vuln1.BlobID, result1.BlobID)
	assert.Nil(t, result1.BlobValue) // since we're not preloading any fields on the fetch

	var result2 VulnerabilityHandle
	err = db.Where("name = ?", "CVE-8765-4321").First(&result2).Error
	require.NoError(t, err)
	assert.Equal(t, vuln2.Name, result2.Name)
	assert.Equal(t, vuln2.ID, result2.ID)
	assert.Equal(t, vuln2.BlobID, result2.BlobID)
	assert.Nil(t, result2.BlobValue) // since we're not preloading any fields on the fetch
}

func TestVulnerabilityStore_GetVulnerability(t *testing.T) {
	db := setupTestStore(t).db
	bw := newBlobStore(db)
	s := newVulnerabilityStore(db, bw)

	vuln := testVulnerabilityHandle()
	err := s.AddVulnerabilities(vuln)
	require.NoError(t, err)

	result, err := s.GetVulnerability(vuln.ID, nil) // don't preload by default
	require.NoError(t, err)
	assert.Equal(t, vuln.Name, result.Name)
	assert.Equal(t, vuln.ID, result.ID)
	assert.Equal(t, vuln.BlobID, result.BlobID)
	assert.Nil(t, result.BlobValue) // since we're not preloading any fields on the fetch

	result, err = s.GetVulnerability(vuln.ID, &GetVulnerabilityOptions{Preload: true})

	require.NoError(t, err)
	require.NotNil(t, result.BlobValue)
	if d := cmp.Diff(vuln, result); d != "" {
		t.Errorf("unexpected result (-want +got):\n%s", d)
	}
}

func TestVulnerabilityStore_GetVulnerabilitiesByName(t *testing.T) {
	db := setupTestStore(t).db
	bw := newBlobStore(db)
	s := newVulnerabilityStore(db, bw)

	vuln1 := testVulnerabilityHandle()
	name := vuln1.Name
	vuln2 := &VulnerabilityHandle{Name: name, BlobID: 2} // note: no blob value
	err := s.AddVulnerabilities(vuln1, vuln2)
	require.NoError(t, err)

	expected := []VulnerabilityHandle{*vuln1, *vuln2}

	results, err := s.GetVulnerabilitiesByName(name, nil) // don't preload by default
	require.NoError(t, err)
	require.Len(t, results, 2)
	for i, result := range results {
		assert.Equal(t, expected[i].Name, result.Name)
		assert.Equal(t, expected[i].ID, result.ID)
		assert.Equal(t, expected[i].BlobID, result.BlobID)
		assert.Nil(t, result.BlobValue) // since we're not preloading any fields on the fetch
	}

	results, err = s.GetVulnerabilitiesByName(name, &GetVulnerabilityOptions{Preload: true})
	require.NoError(t, err)
	require.Len(t, results, 2)

	for i, result := range results {
		if d := cmp.Diff(expected[i], result); d != "" {
			t.Errorf("unexpected result (-want +got):\n%s", d)
		}
	}
}

func testVulnerabilityHandle() *VulnerabilityHandle {
	now := time.Now()

	return &VulnerabilityHandle{
		Name: "CVE-8765-4321",
		BlobValue: &VulnerabilityBlob{
			ID:            "CVE-8765-4321",
			ProviderName:  "provider!",
			Assigners:     []string{"assigner!"},
			Status:        "status!",
			Description:   "description!",
			PublishedDate: &now,
			ModifiedDate:  &now,
			WithdrawnDate: &now,
			References: []Reference{
				{
					URL:  "url!",
					Tags: []string{"tag!"},
				},
			},
			Aliases: []string{"alias!"},
			Severities: []Severity{
				{
					Scheme: "scheme!",
					Value:  "value!",
					Source: "source!",
					Rank:   10,
				},
				{
					Scheme: SeveritySchemeCVSS,
					Value: CVSSSeverity{
						Vector:  "CVSS:4.0/AV:L/AC:H/AT:P/PR:N/UI:P/VC:L/VI:H/VA:N/SC:N/SI:L/SA:N",
						Version: "4.0",
						Score:   5.8,
					},
				},
			},
		},
	}
}
