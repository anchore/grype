package v6

import (
	"errors"
	"fmt"
	"io"

	"github.com/iancoleman/strcase"
	"gorm.io/gorm"

	"github.com/anchore/grype/grype/db/internal/gormadapter"
	"github.com/anchore/grype/grype/search"
	"github.com/anchore/grype/grype/version"
	"github.com/anchore/grype/grype/vulnerability"
	"github.com/anchore/grype/internal/log"
	"github.com/anchore/syft/syft/cpe"
)

func NewVulnerabilityProvider(rdr Reader) vulnerability.Provider {
	return &vulnerabilityProvider{
		db:        rdr.(gormadapter.GetDB).GetDB(),
		providers: map[string]*Provider{},
		reader:    rdr,
	}
}

type vulnerabilityProvider struct {
	db        *gorm.DB
	providers map[string]*Provider
	reader    Reader
}

func (s vulnerabilityProvider) VulnerabilityMetadata(ref vulnerability.Reference) (*vulnerability.Metadata, error) {
	vuln, ok := ref.Internal.(*VulnerabilityHandle)
	if !ok {
		return nil, fmt.Errorf("no vulnerability ID found")
	}
	return &vulnerability.Metadata{
		ID:          vuln.Name,
		DataSource:  vuln.Provider.ID,
		Namespace:   ref.Namespace,
		Severity:    toSeverityString(vuln),
		URLs:        toURLs(vuln),
		Description: vuln.BlobValue.Description,
		Cvss:        toCvss(vuln.BlobValue.Severities...),
	}, nil
}

func (s vulnerabilityProvider) Close() error {
	return s.reader.(io.Closer).Close()
}

//nolint:funlen,gocognit
func (s vulnerabilityProvider) FindVulnerabilities(criteria ...vulnerability.Criteria) ([]vulnerability.Vulnerability, error) {
	var err error

	var out []vulnerability.Vulnerability
	for _, criteriaSet := range search.CriteriaIterator(criteria) {
		var vulnSpec *VulnerabilitySpecifier
		var pkgSpec *PackageSpecifier
		var cpeSpec *cpe.Attributes
		var osSpec *OSSpecifier

		for i := 0; i < len(criteriaSet); i++ {
			applied := false
			switch c := criteriaSet[i].(type) {
			case *search.PackageNameCriteria:
				if pkgSpec == nil {
					pkgSpec = &PackageSpecifier{}
				}
				if pkgSpec.Name == "" {
					pkgSpec.Name = c.PackageName
					applied = true
				}
			case *search.IDCriteria:
				if vulnSpec == nil {
					vulnSpec = &VulnerabilitySpecifier{}
				}
				if vulnSpec.Name == "" {
					vulnSpec.Name = c.ID
					applied = true
				}
			case *search.CPECriteria:
				if cpeSpec == nil {
					cpeSpec = &cpe.Attributes{}
				}
				if cpeSpec.Part == "" {
					*cpeSpec = c.CPE.Attributes
					if pkgSpec == nil {
						pkgSpec = &PackageSpecifier{}
					}
					pkgSpec.CPE = &c.CPE.Attributes
					applied = true
				}
			case *search.DistroCriteria:
				if osSpec == nil {
					osSpec = &OSSpecifier{}
				}
				if osSpec.Name == "" {
					osSpec.Name = c.Distro.Name()
					osSpec.MajorVersion = c.Distro.MajorVersion()
					osSpec.MinorVersion = c.Distro.MinorVersion()
					applied = true
				}
			}

			// remove fully applied criteria from later checks
			if applied {
				criteriaSet = append(criteriaSet[0:i], criteriaSet[i+1:]...)
				i--
			}
		}

		var vulnSpecs VulnerabilitySpecifiers
		if vulnSpec != nil {
			vulnSpecs = append(vulnSpecs, *vulnSpec)
		}

		var osSpecs OSSpecifiers
		if osSpec != nil {
			osSpecs = append(osSpecs, osSpec)
		}

		var affectedPackages []AffectedPackageHandle
		var affectedCPEs []AffectedCPEHandle

		if pkgSpec != nil || vulnSpec != nil {
			affectedPackages, err = s.reader.GetAffectedPackages(pkgSpec, &GetAffectedPackageOptions{
				OSs:             osSpecs,
				Vulnerabilities: vulnSpecs,
			})
			if err != nil {
				return nil, err
			}
		}

		if cpeSpec != nil {
			affectedCPEs, err = s.reader.GetAffectedCPEs(cpeSpec, &GetAffectedCPEOptions{
				PreloadCPE:      true,
				Vulnerabilities: vulnSpecs,
			})
			if err != nil {
				return nil, err
			}
		}

		// need blob values filled out for affected version constraints/ranges
		if err = fillAffectedPackageHandles(s.db, ptrs(affectedPackages)); err != nil {
			return nil, err
		}
		affectedPackages = filterAffectedVersions(affectedPackages, criteriaSet)

		// after filtering, read vulnerability data
		if err = fillAffectedPackageHandles(s.db, ptrs(affectedPackages)); err != nil {
			return nil, err
		}

		// fill complete vulnerabilities for this set
		vulns, err := s.toVulns(affectedPackages, affectedCPEs)
		if err != nil {
			return nil, err
		}

		// filter vulnerabilities by any remaining criteria such as ByQualifiedPackages
		vulns, err = s.filterVulnerabilities(vulns, criteriaSet...)
		if err != nil {
			return nil, err
		}

		out = append(out, vulns...)
	}

	return out, nil
}

func filterAffectedVersions(packages []AffectedPackageHandle, criteria []vulnerability.Criteria) []AffectedPackageHandle {
	var constraintMatcher search.VersionConstraintMatcher
	for _, c := range criteria {
		if nextMatcher, ok := c.(search.VersionConstraintMatcher); ok {
			if constraintMatcher == nil {
				constraintMatcher = nextMatcher
			} else {
				constraintMatcher = search.MultiConstraintMatcher(constraintMatcher, nextMatcher)
			}
		}
	}
	// no constraint matcher, just return all packages
	if constraintMatcher == nil {
		return packages
	}
nextPackage:
	for i := 0; i < len(packages); i++ {
		b := packages[i].BlobValue
		for _, r := range b.Ranges {
			v := r.Version
			format := version.ParseFormat(v.Type)
			constraint, err := version.GetConstraint(v.Constraint, format)
			if err != nil {
				log.WithFields("error", err, "constraint", v.Constraint, "format", v.Type).Debug("unable to parse constraint")
				continue
			}
			matches, err := constraintMatcher.MatchesConstraint(constraint)
			if err != nil {
				log.WithFields("error", err, "constraint", v.Constraint, "format", v.Type).Debug("match constraint error")
			}
			if matches {
				continue nextPackage
			}
		}
		// if we haven't matched a constraint, remove the package
		packages = append(packages[:i], packages[i+1:]...)
		i--
	}
	return packages
}

func toSeverityString(vuln *VulnerabilityHandle) string {
	return strcase.ToCamel(getSeverity(vuln).String())
}

func getSeverity(vuln *VulnerabilityHandle) vulnerability.Severity {
	if vuln.BlobValue == nil {
		return vulnerability.UnknownSeverity
	}
	if len(vuln.BlobValue.Severities) > 0 {
		return extractSeverity(vuln.BlobValue.Severities[0].Value)
	}
	return vulnerability.UnknownSeverity
}

func extractSeverity(severity any) vulnerability.Severity {
	switch sev := severity.(type) {
	case CVSSSeverity:
		return normalizedScoreToSeverityValue(sev.Score / 10.)
	default:
		return vulnerability.UnknownSeverity
	}
}

func normalizedScoreToSeverityValue(score float64) vulnerability.Severity {
	if score > .9 {
		return vulnerability.CriticalSeverity
	}
	if score > .7 {
		return vulnerability.HighSeverity
	}
	if score > .4 {
		return vulnerability.MediumSeverity
	}
	if score > .2 {
		return vulnerability.LowSeverity
	}
	if score >= .0 {
		return vulnerability.NegligibleSeverity
	}
	return vulnerability.UnknownSeverity
}

func toURLs(vuln *VulnerabilityHandle) []string {
	var out []string
	for _, v := range vuln.BlobValue.References {
		out = append(out, v.URL)
	}
	return out
}

func (s vulnerabilityProvider) toVulns(packageHandles []AffectedPackageHandle, cpeHandles []AffectedCPEHandle) ([]vulnerability.Vulnerability, error) {
	var out []vulnerability.Vulnerability

	// ensure all data we need is filled out
	packageHandlePtrs := ptrs(packageHandles)
	if err := errors.Join(
		fillAffectedPackageHandles(s.db, packageHandlePtrs),
		s.fillVulnerabilityHandles(affectedPackageVulnerabilityHandles(packageHandlePtrs)),
	); err != nil {
		return nil, err
	}

	cpeHandlePtrs := ptrs(cpeHandles)
	if err := errors.Join(
		s.fillAffectedCPEHandles(cpeHandlePtrs),
		s.fillVulnerabilityHandles(affectedCPEVulnerabilityHandles(cpeHandlePtrs)),
	); err != nil {
		return nil, err
	}

	for _, packageHandle := range packageHandles {
		if packageHandle.BlobValue == nil {
			log.Debugf("unable to find blobValue for %+v", packageHandle)
			continue
		}
		for _, rng := range packageHandle.BlobValue.Ranges {
			v, err := newVulnerabilityFromAffectedPackageHandle(s.reader, packageHandle, rng)
			if err != nil {
				return nil, err
			}
			if v == nil {
				continue
			}
			out = append(out, *v)
		}
	}

	if err := s.fillVulnerabilityHandles(affectedCPEVulnerabilityHandles(ptrs(cpeHandles))); err != nil {
		return out, err
	}

	for _, c := range cpeHandles {
		if c.BlobValue == nil {
			log.Debugf("unable to find blobValue for %+v", c)
			continue
		}
		for _, rng := range c.BlobValue.Ranges {
			v, err := newVulnerabilityFromAffectedCPEHandle(s.reader, c, rng)
			if err != nil {
				return nil, err
			}
			if v == nil {
				continue
			}
			out = append(out, *v)
		}
	}

	return out, nil
}

func (s vulnerabilityProvider) fillProviders(handles []*VulnerabilityHandle) error {
	if len(s.providers) == 0 {
		var providers []*Provider
		tx := s.db.Find(&providers)
		if tx.Error != nil {
			return tx.Error
		}
		for _, p := range providers {
			s.providers[p.ID] = p
		}
	}

	for _, h := range handles {
		h.Provider = s.providers[h.ProviderID]
	}

	return nil
}

func (s vulnerabilityProvider) filterVulnerabilities(vulns []vulnerability.Vulnerability, criteria ...vulnerability.Criteria) ([]vulnerability.Vulnerability, error) {
	isMatch := func(v vulnerability.Vulnerability) (bool, error) {
		for _, c := range criteria {
			if _, ok := c.(search.VersionConstraintMatcher); ok {
				continue // already run
			}
			matches, err := c.MatchesVulnerability(v)
			if !matches || err != nil {
				return false, err
			}
		}
		return true, nil
	}
	for i := 0; i < len(vulns); i++ {
		matches, err := isMatch(vulns[i])
		if err != nil {
			return nil, err
		}
		if !matches {
			vulns = append(vulns[0:i], vulns[i+1:]...)
			i--
		}
	}
	return vulns, nil
}

var _ interface {
	vulnerability.Provider
} = (*vulnerabilityProvider)(nil)
