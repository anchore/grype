package v6

import (
	"errors"
	"fmt"
	"io"
	"strings"

	"github.com/iancoleman/strcase"
	"gorm.io/gorm"

	"github.com/anchore/grype/grype/db/internal/gormadapter"
	"github.com/anchore/grype/grype/search"
	"github.com/anchore/grype/grype/version"
	"github.com/anchore/grype/grype/vulnerability"
	"github.com/anchore/grype/internal/log"
	"github.com/anchore/syft/syft/cpe"
)

func NewVulnerabilityProvider(rdr Reader) vulnerability.Provider {
	return &vulnerabilityProvider{
		db:        rdr.(gormadapter.GetDB).GetDB(),
		providers: map[string]*Provider{},
		reader:    rdr,
	}
}

type vulnerabilityProvider struct {
	db        *gorm.DB
	providers map[string]*Provider
	reader    Reader
}

var _ interface {
	vulnerability.Provider
} = (*vulnerabilityProvider)(nil)

func (s vulnerabilityProvider) VulnerabilityMetadata(ref vulnerability.Reference) (*vulnerability.Metadata, error) {
	vuln, ok := ref.Internal.(*VulnerabilityHandle)
	if !ok {
		return nil, nil
	}
	return &vulnerability.Metadata{
		ID:          vuln.Name,
		DataSource:  vuln.Provider.ID,
		Namespace:   ref.Namespace,
		Severity:    toSeverityString(vuln),
		URLs:        toURLs(vuln),
		Description: vuln.BlobValue.Description,
		Cvss:        toCvss(vuln.BlobValue.Severities...),
	}, nil
}

func (s vulnerabilityProvider) Close() error {
	return s.reader.(io.Closer).Close()
}

//nolint:funlen,gocognit,gocyclo
func (s vulnerabilityProvider) FindVulnerabilities(criteria ...vulnerability.Criteria) ([]vulnerability.Vulnerability, error) {
	var err error

	var out []vulnerability.Vulnerability
	for _, criteriaSet := range search.CriteriaIterator(criteria) {
		var vulnSpecs VulnerabilitySpecifiers
		var osSpecs OSSpecifiers
		var pkgSpec *PackageSpecifier
		var cpeSpec *cpe.Attributes

		for i := 0; i < len(criteriaSet); i++ {
			applied := false
			switch c := criteriaSet[i].(type) {
			case *search.PackageNameCriteria:
				if pkgSpec == nil {
					pkgSpec = &PackageSpecifier{}
				}
				if pkgSpec.Name != "" {
					return out, fmt.Errorf("multiple package name criteria specified for: %s, %s", pkgSpec.Name, c.PackageName)
				}
				pkgSpec.Name = c.PackageName
				applied = true
			case *search.LanguageCriteria:
				if pkgSpec == nil {
					pkgSpec = &PackageSpecifier{}
				}
				if pkgSpec.Ecosystem != "" {
					return out, fmt.Errorf("multiple package type criteria specified for: %s, %s", pkgSpec.Ecosystem, c.Language)
				}
				pkgSpec.Ecosystem = string(c.Language)
				applied = true
			case *search.IDCriteria:
				vulnSpecs = append(vulnSpecs, VulnerabilitySpecifier{
					Name: c.ID,
				})
				applied = true
			case *search.CPECriteria:
				if cpeSpec == nil {
					cpeSpec = &cpe.Attributes{}
				}
				if cpeSpec.Vendor != "" || cpeSpec.Product != "" {
					return out, fmt.Errorf("multiple CPEs specified for: %s, %s", cpeSpec.BindToFmtString(), c.CPE.Attributes.BindToFmtString())
				}
				*cpeSpec = c.CPE.Attributes
				if cpeSpec.Product == cpe.Any || cpeSpec.Vendor == cpe.Any {
					return nil, fmt.Errorf("must specify vendor and product to search by CPE; got: %s", c.CPE.Attributes.BindToFmtString())
				}
				if pkgSpec == nil {
					pkgSpec = &PackageSpecifier{}
				}
				if pkgSpec.CPE != nil {
					return out, fmt.Errorf("multiple CPEs specified for: %s, %s", pkgSpec.CPE.BindToFmtString(), c.CPE.Attributes.BindToFmtString())
				}
				pkgSpec.CPE = &c.CPE.Attributes
				// normalize the values used to search by CPE parts
				replace(strings.ToLower, &cpeSpec.Vendor, &cpeSpec.Product, &cpeSpec.Update, &cpeSpec.TargetSW)
				applied = true
			case *search.DistroCriteria:
				for _, d := range c.Distros {
					osSpecs = append(osSpecs, &OSSpecifier{
						Name:         d.Name(),
						MajorVersion: d.MajorVersion(),
						MinorVersion: d.MinorVersion(),
					})
				}
				applied = true
			}

			// remove fully applied criteria from later checks
			if applied {
				criteriaSet = append(criteriaSet[0:i], criteriaSet[i+1:]...)
				i--
			}
		}

		versionMatcher, remainingCriteria := splitConstraintMatcher(criteriaSet...)

		var affectedPackages []AffectedPackageHandle
		var affectedCPEs []AffectedCPEHandle

		if pkgSpec != nil || len(vulnSpecs) > 0 {
			affectedPackages, err = s.reader.GetAffectedPackages(pkgSpec, &GetAffectedPackageOptions{
				OSs:             osSpecs,
				Vulnerabilities: vulnSpecs,
			})
			if err != nil {
				return nil, err
			}

			// need blob values filled out for affected version constraints/ranges
			if err = fillAffectedPackageBlobs(s.db, ptrs(affectedPackages)); err != nil {
				return nil, err
			}

			affectedPackages = filterAffectedPackageVersions(versionMatcher, affectedPackages)
		}

		if cpeSpec != nil {
			affectedCPEs, err = s.reader.GetAffectedCPEs(cpeSpec, &GetAffectedCPEOptions{
				PreloadCPE:      true,
				Vulnerabilities: vulnSpecs,
			})
			if err != nil {
				return nil, err
			}

			if err := fillAffectedCPEBlobs(s.db, ptrs(affectedCPEs)); err != nil {
				return nil, err
			}
			affectedCPEs = filterAffectedCPEVersions(versionMatcher, affectedCPEs)
		}

		// after filtering, read vulnerability data
		if err = fillAffectedPackageHandles(s.db, ptrs(affectedPackages)); err != nil {
			return nil, err
		}

		// fill complete vulnerabilities for this set
		vulns, err := s.toVulnerabilities(affectedPackages, affectedCPEs)
		if err != nil {
			return nil, err
		}

		// filter vulnerabilities by any remaining criteria such as ByQualifiedPackages
		vulns, err = s.filterVulnerabilities(vulns, remainingCriteria...)
		if err != nil {
			return nil, err
		}

		out = append(out, vulns...)
	}

	return out, nil
}

func (s vulnerabilityProvider) toVulnerabilities(packageHandles []AffectedPackageHandle, cpeHandles []AffectedCPEHandle) ([]vulnerability.Vulnerability, error) {
	var out []vulnerability.Vulnerability

	// ensure all data we need is filled out
	packageHandlePtrs := ptrs(packageHandles)
	if err := errors.Join(
		fillAffectedPackageHandles(s.db, packageHandlePtrs),
		s.fillVulnerabilityHandles(affectedPackageVulnerabilityHandles(packageHandlePtrs)),
	); err != nil {
		return nil, err
	}

	for _, packageHandle := range packageHandles {
		if packageHandle.BlobValue == nil {
			log.Debugf("unable to find blobValue for %+v", packageHandle)
			continue
		}
		for _, rng := range packageHandle.BlobValue.Ranges {
			v, err := newVulnerabilityFromAffectedPackageHandle(s.reader, packageHandle, rng)
			if err != nil {
				log.WithFields("error", err, "pkg", packageHandle, "range", rng).Debug("unable to create vulnerability for package and range")
			}
			if v == nil {
				continue
			}
			out = append(out, *v)
		}
	}

	cpeHandlePtrs := ptrs(cpeHandles)
	if err := errors.Join(
		fillAffectedCPEHandles(s.db, cpeHandlePtrs),
		s.fillVulnerabilityHandles(affectedCPEVulnerabilityHandles(cpeHandlePtrs)),
	); err != nil {
		return nil, err
	}

	for _, c := range cpeHandles {
		if c.BlobValue == nil {
			log.Debugf("unable to find blobValue for %+v", c)
			continue
		}
		for _, rng := range c.BlobValue.Ranges {
			v, err := newVulnerabilityFromAffectedCPEHandle(s.reader, c, rng)
			if err != nil {
				log.WithFields("error", err, "cpe", c.CPE, "range", rng).Debug("unable to create vulnerability for CPE and range")
			}
			if v == nil {
				continue
			}
			out = append(out, *v)
		}
	}

	return out, nil
}

func (s vulnerabilityProvider) fillProviders(handles []*VulnerabilityHandle) error {
	if len(s.providers) == 0 {
		var providers []*Provider
		tx := s.db.Find(&providers)
		if tx.Error != nil {
			return tx.Error
		}
		for _, p := range providers {
			s.providers[p.ID] = p
		}
	}

	for _, h := range handles {
		h.Provider = s.providers[h.ProviderID]
	}

	return nil
}

func (s vulnerabilityProvider) filterVulnerabilities(vulns []vulnerability.Vulnerability, criteria ...vulnerability.Criteria) ([]vulnerability.Vulnerability, error) {
	isMatch := func(v vulnerability.Vulnerability) (bool, error) {
		for _, c := range criteria {
			if _, ok := c.(search.VersionConstraintMatcher); ok {
				continue // already run
			}
			matches, err := c.MatchesVulnerability(v)
			if !matches || err != nil {
				vulnerability.LogDropped(v.Reference.ID, err, c)
				return false, err
			}
		}
		return true, nil
	}
	for i := 0; i < len(vulns); i++ {
		matches, err := isMatch(vulns[i])
		if err != nil {
			return nil, err
		}
		if !matches {
			vulns = append(vulns[0:i], vulns[i+1:]...)
			i--
		}
	}
	return vulns, nil
}

// splitConstraintMatcher returns a search.VersionConstraintMatcher from all search.VersionConstraintMatcher(s) in the criteria
func splitConstraintMatcher(criteria ...vulnerability.Criteria) (search.VersionConstraintMatcher, []vulnerability.Criteria) {
	var remaining []vulnerability.Criteria
	var matcher search.VersionConstraintMatcher
	for _, c := range criteria {
		if nextMatcher, ok := c.(search.VersionConstraintMatcher); ok {
			if matcher == nil {
				matcher = nextMatcher
			} else {
				matcher = search.MultiConstraintMatcher(matcher, nextMatcher)
			}
		} else {
			remaining = append(remaining, c)
		}
	}
	return matcher, remaining
}

func filterAffectedPackageVersions(constraintMatcher search.VersionConstraintMatcher, packages []AffectedPackageHandle) []AffectedPackageHandle {
	// no constraint matcher, just return all packages
	if constraintMatcher == nil {
		return packages
	}
	for packageIdx := 0; packageIdx < len(packages); packageIdx++ {
		filterAffectedPackageRanges(constraintMatcher, packages[packageIdx].BlobValue)
		if len(packages[packageIdx].BlobValue.Ranges) > 0 {
			continue // keep this handle
		}
		// if we haven't matched a constraint, remove the package
		packages = append(packages[0:packageIdx], packages[packageIdx+1:]...)
		packageIdx--
	}
	return packages
}

func filterAffectedCPEVersions(constraintMatcher search.VersionConstraintMatcher, handles []AffectedCPEHandle) []AffectedCPEHandle {
	// no constraint matcher, just return all packages
	if constraintMatcher == nil {
		return handles
	}
	var out []AffectedCPEHandle
	for _, handle := range handles {
		filterAffectedPackageRanges(constraintMatcher, handle.BlobValue)
		if len(handle.BlobValue.Ranges) > 0 {
			out = append(out, handle)
			continue // keep this handle
		}

		id := ""
		if handle.Vulnerability != nil {
			id = handle.Vulnerability.Name
		} else if len(handle.BlobValue.CVEs) > 0 {
			id = handle.BlobValue.CVEs[0]
		}
		vulnerability.LogDropped(id, "constraints", handle, constraintMatcher)
	}
	return out
}

// filterAffectedPackageRanges returns true if all ranges removed
func filterAffectedPackageRanges(matcher search.VersionConstraintMatcher, b *AffectedPackageBlob) {
	var out []AffectedRange
	for _, r := range b.Ranges {
		v := r.Version
		format := version.ParseFormat(v.Type)
		constraint, err := version.GetConstraint(v.Constraint, format)
		if err != nil || constraint == nil {
			log.WithFields("error", err, "constraint", v.Constraint, "format", v.Type).Debug("unable to parse constraint")
			continue
		}
		matches, err := matcher.MatchesConstraint(constraint)
		if err != nil {
			log.WithFields("error", err, "constraint", v.Constraint, "format", v.Type).Debug("match constraint error")
		}
		if matches {
			out = append(out, r)
			continue
		}
	}
	b.Ranges = out
}

func toSeverityString(vuln *VulnerabilityHandle) string {
	return strcase.ToCamel(getSeverity(vuln).String())
}

func getSeverity(vuln *VulnerabilityHandle) vulnerability.Severity {
	if vuln.BlobValue == nil {
		return vulnerability.UnknownSeverity
	}
	if len(vuln.BlobValue.Severities) > 0 {
		return extractSeverity(vuln.BlobValue.Severities[0].Value)
	}
	return vulnerability.UnknownSeverity
}

func extractSeverity(severity any) vulnerability.Severity {
	switch sev := severity.(type) {
	case CVSSSeverity:
		return normalizedScoreToSeverityValue(sev.Score / 10.)
	default:
		return vulnerability.UnknownSeverity
	}
}

func normalizedScoreToSeverityValue(score float64) vulnerability.Severity {
	if score > .9 {
		return vulnerability.CriticalSeverity
	}
	if score > .7 {
		return vulnerability.HighSeverity
	}
	if score > .4 {
		return vulnerability.MediumSeverity
	}
	if score > .2 {
		return vulnerability.LowSeverity
	}
	if score >= .0 {
		return vulnerability.NegligibleSeverity
	}
	return vulnerability.UnknownSeverity
}

func toURLs(vuln *VulnerabilityHandle) []string {
	var out []string
	for _, v := range vuln.BlobValue.References {
		out = append(out, v.URL)
	}
	return out
}

func replace[T any](replacerFunc func(T) T, values ...*T) {
	for i, v := range values {
		if v == nil {
			continue
		}
		next := replacerFunc(*v)
		*values[i] = next
	}
}
