package model

import (
	"encoding/json"
	"fmt"
	"github.com/anchore/grype/grype/db/internal/sqlite"
	v4 "github.com/anchore/grype/grype/db/v4"
)

const (
	VulnerabilityMatchExclusionTableName    = "vulnerability_match_exclusion"
	GetVulnerabilityMatchExclusionIndexName = "get_vulnerability_match_exclusion_index"
)

// VulnerabilityMatchExclusionModel is a struct used to serialize db.VulnerabilityMatchExclusion information into a sqlite3 DB.
type VulnerabilityMatchExclusionModel struct {
	PK            uint64 `gorm:"primary_key;auto_increment;"`
	ID            string `gorm:"column:id; index:get_vulnerability_match_exclusion_index"`
	Namespace     string `gorm:"column:namespace; index:get_vulnerability_match_exclusion_index"`
	Constraints   string `gorm:"column:constraints"`
	Justification string `gorm:"column:justification"`
}

// NewVulnerabilityMatchExclusionModel generates a new model from a db.VulnerabilityMatchExclusion struct.
func NewVulnerabilityMatchExclusionModel(v v4.VulnerabilityMatchExclusion) VulnerabilityMatchExclusionModel {
	return VulnerabilityMatchExclusionModel{
		ID:            v.ID,
		Namespace:     v.Namespace,
		Constraints:   sqlite.ToNullString(v.Constraints).String,
		Justification: v.Justification,
	}
}

// TableName returns the table which all db.VulnerabilityMatchExclusion model instances are stored into.
func (VulnerabilityMatchExclusionModel) TableName() string {
	return VulnerabilityMatchExclusionTableName
}

// Inflate generates a db.VulnerabilityMatchExclusion object from the serialized model instance.
func (m *VulnerabilityMatchExclusionModel) Inflate() (v4.VulnerabilityMatchExclusion, error) {
	var constraints []v4.VulnerabilityMatchExclusionConstraint
	err := json.Unmarshal([]byte(m.Constraints), &constraints)
	if err != nil {
		return v4.VulnerabilityMatchExclusion{}, fmt.Errorf("unable to unmarshal vulnerability match exclusion constraints (%+v): %w", m.Constraints, err)
	}

	return v4.VulnerabilityMatchExclusion{
		ID:            m.ID,
		Namespace:     m.Namespace,
		Constraints:   constraints,
		Justification: m.Justification,
	}, nil
}
