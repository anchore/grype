package v4

// VulnerabilityMatchExclusion represents the minimum data fields necessary to automatically filter certain
// vulnerabilities from match results based on the specified constraints.
type VulnerabilityMatchExclusion struct {
	ID            string                                  `json:"id"`                    // The identifier of the vulnerability or advisory
	Constraints   []VulnerabilityMatchExclusionConstraint `json:"constraints,omitempty"` // The constraints under which the exclusion applies
	Justification string                                  `json:"justification"`         // Justification for the exclusion
}

func (c VulnerabilityMatchExclusion) Usable() bool {
	for _, constraint := range c.Constraints {
		if !constraint.Usable() {
			return false
		}
	}

	return true
}

// VulnerabilityMatchExclusionConstraint describes criteria for which matches should be excluded
type VulnerabilityMatchExclusionConstraint struct {
	Vulnerability VulnerabilityExclusionConstraint `json:"vulnerability,omitempty"` // Vulnerability exclusion criteria
	Package       PackageExclusionConstraint       `json:"package,omitempty"`       // Package exclusion criteria
	ExtraFields   map[string]interface{}           `json:"-"`
}

func (c VulnerabilityMatchExclusionConstraint) Usable() bool {
	return len(c.ExtraFields) == 0 && c.Vulnerability.Usable() && c.Package.Usable()
}

// VulnerabilityExclusionConstraint describes criteria for excluding a match based on additional vulnerability components
type VulnerabilityExclusionConstraint struct {
	Namespace   string                 `json:"namespace,omitempty"` // Vulnerability namespace
	FixState    FixState               `json:"fix_state,omitempty"` // Vulnerability fix state
	ExtraFields map[string]interface{} `json:"-"`
}

func (p VulnerabilityExclusionConstraint) Usable() bool {
	return len(p.ExtraFields) == 0
}

// PackageExclusionConstraint describes criteria for excluding a match based on package components
type PackageExclusionConstraint struct {
	Name        string                 `json:"name,omitempty"`     // Package name
	Language    string                 `json:"language,omitempty"` // The language ecosystem for a package
	Type        string                 `json:"type,omitempty"`     // Package type
	Version     string                 `json:"version,omitempty"`  // Package version
	Location    string                 `json:"location,omitempty"` // Package location
	ExtraFields map[string]interface{} `json:"-"`
}

func (p PackageExclusionConstraint) Usable() bool {
	return len(p.ExtraFields) == 0
}
