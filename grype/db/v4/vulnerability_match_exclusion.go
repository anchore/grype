package v4

// VulnerabilityMatchExclusion represents the minimum data fields necessary to automatically filter certain
// vulnerabilities from match results based on the specified constraints.
type VulnerabilityMatchExclusion struct {
	ID            string                                  `json:"id"`            // The identifier of the vulnerability or advisory
	Constraints   []VulnerabilityMatchExclusionConstraint `json:"constraints"`   // The constraints under which the exclusion applies
	Justification string                                  `json:"justification"` // Justification for the exclusion
}

func (c VulnerabilityMatchExclusion) Usable() bool {
	for _, constraint := range c.Constraints {
		if !constraint.Usable() {
			return false
		}
	}

	return true
}

// VulnerabilityMatchExclusionConstraint describes criteria for which matches should be excluded
type VulnerabilityMatchExclusionConstraint struct {
	Namespaces           []string                                         `json:"namespaces"`            // Vulnerability namespaces
	FixStates            []FixState                                       `json:"fix_states"`            // Vulnerability fix states
	EcosystemConstraints []VulnerabilityMatchExclusionEcosystemConstraint `json:"ecosystem_constraints"` // Ecosystem-specific constraints
	ExtraFields          map[string]interface{}                           `json:"-"`
}

func (c VulnerabilityMatchExclusionConstraint) Usable() bool {
	for _, constraint := range c.EcosystemConstraints {
		if !constraint.Usable() {
			return false
		}
	}
	return len(c.ExtraFields) == 0
}

// VulnerabilityMatchExclusionEcosystemConstraint describes criteria for which matches should be excluded within an
// ecosystem
type VulnerabilityMatchExclusionEcosystemConstraint struct {
	Language           string                                         `json:"language"`            // A language ecosystem
	PackageType        string                                         `json:"package_type"`        // A package ecosystem
	PackageConstraints []VulnerabilityMatchExclusionPackageConstraint `json:"package_constraints"` // Package-specific constraints
	ExtraFields        map[string]interface{}                         `json:"-"`
}

func (c VulnerabilityMatchExclusionEcosystemConstraint) Usable() bool {
	for _, constraint := range c.PackageConstraints {
		if !constraint.Usable() {
			return false
		}
	}
	return len(c.ExtraFields) == 0
}

// VulnerabilityMatchExclusionPackageConstraint describes the package criteria for which matches should be excluded
type VulnerabilityMatchExclusionPackageConstraint struct {
	PackageName string                 `json:"package_name"` // The name of a package
	Versions    []string               `json:"versions"`     // Package versions
	Locations   []string               `json:"locations"`    // Package locations
	ExtraFields map[string]interface{} `json:"-"`
}

func (c VulnerabilityMatchExclusionPackageConstraint) Usable() bool {
	return len(c.ExtraFields) == 0
}
