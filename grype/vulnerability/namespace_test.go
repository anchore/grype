package vulnerability

import (
	"fmt"
	"testing"

	"github.com/anchore/syft/syft/distro"
	"github.com/scylladb/go-set/strset"
	"github.com/stretchr/testify/assert"
)

func TestDistroNamespace_AllDistros(t *testing.T) {

	tests := []struct {
		dist     distro.Type
		version  string
		expected string
	}{
		// regression: https://github.com/anchore/grype/issues/221
		{
			dist:     distro.RedHat,
			version:  "8.3",
			expected: "rhel:8",
		},
		{
			dist:     distro.CentOS,
			version:  "8.3",
			expected: "rhel:8",
		},
		{
			dist:     distro.AmazonLinux,
			version:  "8.3",
			expected: "amzn:8",
		},
		{
			dist:     distro.OracleLinux,
			version:  "8.3",
			expected: "ol:8",
		},
		{
			dist:    distro.Fedora,
			version: "31.1",
			// TODO: this is incorrect and will be solved in a future issue (to map the fedora version to the rhel latest version)
			expected: "rhel:31",
		},
		// end of regression #221
		{
			dist:     distro.RedHat,
			version:  "8",
			expected: "rhel:8",
		},
		{
			dist:     distro.AmazonLinux,
			version:  "2",
			expected: "amzn:2",
		},
		{
			dist:     distro.OracleLinux,
			version:  "6",
			expected: "ol:6",
		},
		{
			dist:     distro.Alpine,
			version:  "1.3.1",
			expected: "alpine:1.3",
		},
		{
			dist:     distro.Debian,
			version:  "8",
			expected: "debian:8",
		},
		{
			dist:     distro.Fedora,
			version:  "31",
			expected: "rhel:31",
		},
		{
			dist:     distro.Busybox,
			version:  "3.1.1",
			expected: "busybox:3.1.1",
		},
		{
			dist:     distro.CentOS,
			version:  "7",
			expected: "rhel:7",
		},
		{
			dist:     distro.Ubuntu,
			version:  "18.04",
			expected: "ubuntu:18.04",
		},
		{
			// TODO: this is not correct. This should be mapped to a feed source.
			dist:     distro.ArchLinux,
			version:  "", // ArchLinux doesn't expose a version
			expected: "archlinux:",
		},
		{
			// TODO: this is not correct. This should be mapped to a feed source.
			dist:     distro.OpenSuseLeap,
			version:  "15.2",
			expected: "opensuseleap:15.2",
		},
		{
			// TODO: this is not correct. This should be mapped to a feed source.
			dist:     distro.Photon,
			version:  "4.0",
			expected: "photon:4.0",
		},
		{
			dist:     distro.Windows,
			version:  "471816",
			expected: "microsoft",
		},
	}

	observedDistros := strset.New()
	actualDistros := strset.New()

	for _, d := range distro.All {
		actualDistros.Add(d.String())
	}

	for _, test := range tests {
		name := fmt.Sprintf("%s:%s", test.dist, test.version)
		t.Run(name, func(t *testing.T) {
			d, err := distro.NewDistro(test.dist, test.version, "")
			if err != nil {
				t.Errorf("could not create distro='%+v:%+v': %+v", test.dist, test.version, err)
			}

			observedDistros.Add(d.Type.String())

			actual := distroNamespace(d)
			assert.Equal(t, actual, test.expected)
		})
	}

	for _, d := range strset.SymmetricDifference(observedDistros, actualDistros).List() {
		t.Errorf("missed/extra distro in testing: %s", d)
	}

}

func TestDistroNamespace_VersionHandling(t *testing.T) {

	tests := []struct {
		dist     distro.Type
		version  string
		expected string
	}{
		{
			dist:     distro.Debian,
			version:  "8",
			expected: "debian:8",
		},
		{
			dist:     distro.Debian,
			version:  "18.04",
			expected: "debian:18.04",
		},
		{
			dist:     distro.Debian,
			version:  "0",
			expected: "debian:0",
		},
	}

	for _, test := range tests {
		name := fmt.Sprintf("%s:%s", test.dist, test.version)
		t.Run(name, func(t *testing.T) {
			d, err := distro.NewDistro(test.dist, test.version, "")
			if err != nil {
				t.Errorf("could not create distro='%+v:%+v': %+v", test.dist, test.version, err)
			}

			actual := distroNamespace(d)
			if actual != test.expected {
				t.Errorf("mismatched distro namespace: '%s'!='%s'", actual, test.expected)
			}
		})
	}

}
