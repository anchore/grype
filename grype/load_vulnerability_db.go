package grype

import (
	"fmt"

	v5 "github.com/anchore/grype/grype/db/v5"
	v5dist "github.com/anchore/grype/grype/db/v5/distribution"
	v6 "github.com/anchore/grype/grype/db/v6"
	v6dist "github.com/anchore/grype/grype/db/v6/distribution"
	v6inst "github.com/anchore/grype/grype/db/v6/installation"
	"github.com/anchore/grype/grype/vulnerability"
	"github.com/anchore/grype/internal/log"
)

func LoadVulnerabilityDBv6(distCfg v6dist.Config, installCfg v6inst.Config, update bool) (vulnerability.Provider, *v5dist.Status, error) {
	client, err := v6dist.NewClient(distCfg)
	if err != nil {
		return nil, nil, fmt.Errorf("unable to create distribution client: %w", err)
	}
	c, err := v6inst.NewCurator(installCfg, client)
	if err != nil {
		return nil, nil, fmt.Errorf("unable to create curator: %w", err)
	}

	if update {
		_, err := c.Update()
		if err != nil {
			return nil, nil, fmt.Errorf("unable to update db: %w", err)
		}
	}

	rdr, err := c.Reader()
	if err != nil {
		return nil, nil, fmt.Errorf("unable to create db reader: %w", err)
	}

	s := c.Status()
	status := v5dist.Status{
		Built:         s.Built.Time,
		SchemaVersion: 6, // FIXME: should be s.SchemaVersion, not an int
		Location:      s.Path,
		Checksum:      s.Checksum,
		Err:           s.Err,
	}

	v6store := v6.NewVulnerabilityProvider(rdr)

	return v6store, &status, nil
}

func LoadVulnerabilityDB(cfg v5dist.Config, update bool) (*v5.ProviderStore, *v5dist.Status, error) {
	dbCurator, err := v5dist.NewCurator(cfg)
	if err != nil {
		return nil, nil, err
	}

	if update {
		log.Debug("looking for vulnerability database updates")
		_, err := dbCurator.Update()
		if err != nil {
			return nil, nil, err
		}
	}

	storeReader, err := dbCurator.GetStore()
	if err != nil {
		return nil, nil, err
	}

	status := dbCurator.Status()

	p, err := v5.NewVulnerabilityProvider(storeReader)
	if err != nil {
		return nil, &status, err
	}

	s := &v5.ProviderStore{
		Provider:          p,
		ExclusionProvider: v5.NewMatchExclusionProvider(storeReader),
	}

	return s, &status, nil
}
