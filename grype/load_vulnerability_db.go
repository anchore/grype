package grype

import (
	"fmt"
	"io"

	"github.com/anchore/grype/grype/db"
	"github.com/anchore/grype/grype/db/legacy/distribution"
	v5 "github.com/anchore/grype/grype/db/v5"
	v6dist "github.com/anchore/grype/grype/db/v6/distribution"
	v6inst "github.com/anchore/grype/grype/db/v6/installation"
	"github.com/anchore/grype/grype/match"
	"github.com/anchore/grype/grype/store"
	"github.com/anchore/grype/grype/vulnerability"
	"github.com/anchore/grype/internal/log"
)

func LoadVulnerabilityDBv6(distCfg v6dist.Config, installCfg v6inst.Config, update bool) (*store.Store, *distribution.Status, error) {
	client, err := v6dist.NewClient(distCfg)
	if err != nil {
		return nil, nil, fmt.Errorf("unable to create distribution client: %w", err)
	}
	c, err := v6inst.NewCurator(installCfg, client)
	if err != nil {
		return nil, nil, fmt.Errorf("unable to create curator: %w", err)
	}

	if update {
		_, err := c.Update()
		if err != nil {
			return nil, nil, fmt.Errorf("unable to update db: %w", err)
		}
	}

	rdr, err := c.Reader()
	if err != nil {
		return nil, nil, fmt.Errorf("unable to create db reader: %w", err)
	}

	s := c.Status()
	status := distribution.Status{
		Built:         s.Built.Time,
		SchemaVersion: 6, // FIXME: should be s.SchemaVersion, not an int
		Location:      s.Path,
		Checksum:      s.Checksum,
		Err:           s.Err,
	}

	v6store := db.NewVulnerabilityProvider(rdr)

	return &store.Store{
		Provider:          v6store.(vulnerability.Provider),
		MetadataProvider:  v6store.(vulnerability.MetadataProvider),
		ExclusionProvider: v6store.(match.ExclusionProvider),
		Closer:            v6store.(io.Closer),
		V6:                v6store,
	}, &status, nil
}

func LoadVulnerabilityDB(cfg distribution.Config, update bool) (*store.Store, *distribution.Status, error) {
	dbCurator, err := distribution.NewCurator(cfg)
	if err != nil {
		return nil, nil, err
	}

	if update {
		log.Debug("looking for vulnerability database updates")
		_, err := dbCurator.Update()
		if err != nil {
			return nil, nil, err
		}
	}

	storeReader, err := dbCurator.GetStore()
	if err != nil {
		return nil, nil, err
	}

	status := dbCurator.Status()

	p, err := v5.NewVulnerabilityProvider(storeReader)
	if err != nil {
		return nil, &status, err
	}

	s := &store.Store{
		Provider:          p,
		MetadataProvider:  v5.NewVulnerabilityMetadataProvider(storeReader),
		ExclusionProvider: v5.NewMatchExclusionProvider(storeReader),
		Closer:            storeReader,
	}

	return s, &status, nil
}
